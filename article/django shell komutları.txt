python manage.py shell --shell kabuğunu çağırır

from django.contrib.auth.models import User --uygulamadaki yazarlar ile işlem yapılması için yazarlar import edildi

from article.models import Article --article ler import edildi

newUser=User(username="denemekullanici",password="123") --User türünden newUser oluşturuldu ve uygulamadaki parametrelere göre referans aldı
newUser
    <User: denemekullanici>  --newUser artık user türünde
newUser.save() --yapılan değişiklikleri veri tabanında kaydetmek için save yapılmak zorunda

newUser2=User(username="denemekullanici2") --yeni kullanıcı oluşurma için atama
newUser2.set_password("123") --eğer bu şekilde set_password yapılırsa veri tabanına hashlenmiş şekilde şifre eklenir
newUser2.save() --kaydedildi

newUser3=User()
newUser3.username="denemekullanici3"
newUser3.set_password("123")  
newUser3.first_name="yalcin" --yeni değer eklemeleri
newUser3.save()

article=Article(title="django shell deneme",content="İçerik İçerik",author=newUser3) --Article türünden yeni nesne ve atamaların yapılması
article.save()

article2=Article() --direkt sadece nesne oluşturuldu
article2.title="Deneme 15" --bu şekilde de atama yapılabilir yukarıki yapıdan farklı olarak
article2.content="İçerik"     
article2.author=newUser3 --yazar ataması
article2.save()

Article.objects.create(title="deneme21",content="21",author=newUser2) --yeni article oluşturma .objects.create() ile de yapılabiliyor farklı olarak

article=Article.objects.create(title="Deneme30",content="21",author=newUser2)
article.title
    'Deneme30' --değer çağırma
article.title="Deneme 30 değişti" --değer değiştime
article.save()

Article.objects.all() --veri tabanındaki tüm Article objelerini döndürür
    <QuerySet [<Article: Deneme 1>, <Article: Naber>, <Article: Deneme 2>, <Article: django shell deneme>, <Article: Deneme 15>, <Article: deneme21>, <Article: Deneme 30 değişti>]>

Article.objects.get(title="Naber")
    <Article: Naber> --title değeri "Naber" olan article tavuk döner çok güzel

article=Article.objects.get(title="Naber")
article
    <Article: Naber>
article.title
    'Naber'

article.delete() --article yi veri tabanından siler
article=Article.objects.get(id=1)
article.title
    'Deneme 1'
article.author
    <User: yalcinsabancelebi>

Article.objects.filter(title__contains="Den") --filtreleme işlemi, <aranacak başlık>__contains="<aranacak ifade>" olarak yapılır orm yapılarında
    <QuerySet [<Article: Deneme 1>, <Article: Deneme 2>, <Article: django shell deneme>, <Article: Deneme 15>, <Article: deneme21>, <Article: Deneme 30 değişti>]>